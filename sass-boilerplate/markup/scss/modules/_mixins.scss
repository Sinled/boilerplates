// custom font face mixin - fix ie9-10
@mixin my-font-face($name, $font-files, $eot: false, $weight: false, $style: false) {
  $iefont: unquote("#{$eot}?#iefix");
  @font-face {
    font-family: quote($name);
    @if $eot {
      src: font-url($eot);
      $font-files: font-url($iefont) unquote("format('embedded-opentype')"), $font-files; }
    src: $font-files;
    @if $weight {
      font-weight: $weight; }
    @if $style {
      font-style: $style; } } }

%clearfix {
  @if $legacy-support-for-ie {
  	*zoom: 1;
  }
  
  &:after {
  	content: '';
  	display:table;
  	clear: both;
  }
}

%slide-block {
	left: 0;
	bottom: 0;
	width: 100%;
	height: 100%;
	overflow: hidden;
	background: 50% 50%;
	position: fixed;
	@include background-size(cover);
}

%input-text {
	overflow: hidden;

	input[type="text"] {	
		margin: 0;
		padding: 5px;
		background: none;
		border: none;
		width: 100%;
		display: block;
		outline: none;
		@include box-sizing(border-box);
	}
}

%fixed-bg {
	@include hide-text(left);
	position: absolute;
	left: 0;
	bottom: 0;
	margin: 0;
	width: 100%;
	height: 100%;
	background-attachment: fixed;
	background-repeat: no-repeat;
}

// @include responsive($breakpoint, screen)
// (using "screen" as an example)
@mixin responsive($breakpoint, $media: all) {
	@media only #{$media} and ($breakpoint) {
		@content;
	}
}

// hidpi: same concept as "responsive", except that this is focusing on
// HiDPI (a.k.a. retina) displays.
@mixin hidpi($media: all) {
	@media 
		only #{$media} and (min--moz-device-pixel-ratio: 1.5),
		only #{$media} and (-o-min-device-pixel-ratio: 3/2),
		only #{$media} and (-webkit-min-device-pixel-ratio: 1.5),
		only #{$media} and (min-device-pixel-ratio: 1.5),
		only #{$media} and (min-resolution: 1.5dppx) {

		@content;
	}
}

// and just because the term "retina" is so widely used, we'll create
// a mixin that uses that as an alias
@mixin retina($media: all) {
	@include hidpi($media) { @content; }
}

// set styles for animating fixed backgrounds
@mixin background-animations($elem-name, $frames) {
  $i: $frames;
  @while $i > 0 {
    .#{$elem-name}__text-frame--#{$i} {
  		background-image: image-url("#{$elem-name}/frame-#{$i}.png");
    }
    $i: $i - 1;
  }
}

// 
// set-zindex
//
@mixin set-zindex($elem-name, $counter, $direction: "ascending", $startvalue: 0) {
  $i: 0;
	$s: $startvalue;
	$c: $counter;

  @if $direction == "ascending" {
  	@while $i < $c {
  	  .#{$elem-name}--#{$i + 1} {
  	  	z-index: $s + $i;
  	  }
  	  $i: $i + 1;
  	}
  } @else {
  	@while $i < $c {
  	  .#{$elem-name}--#{$i + 1} {
  	  	z-index: $s - $i;
  	  }
  	  $i: $i + 1;
  	}
  }
}
